name: Deploy Web Service and MySQL to ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build & Push Images to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate with Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Define Environment Variables
        run: |
          echo "ECR_REPO=assignment1-dev-ecr" >> $GITHUB_ENV
          echo "ECR_REGISTRY=${{ steps.ecr-login.outputs.registry }}" >> $GITHUB_ENV
          echo "MYSQL_TAG=mysql" >> $GITHUB_ENV
          echo "WEB_SERVICE_TAG=app" >> $GITHUB_ENV

      - name: Build & Push MySQL Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:$MYSQL_TAG -f Dockerfile_mysql .
          docker push $ECR_REGISTRY/$ECR_REPO:$MYSQL_TAG

      - name: Build Web Service Image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:$WEB_SERVICE_TAG -f Dockerfile .

      - name: Setup Local Test Environment
        run: |
          docker network create app-network
          docker run -d --name mysql-db --network app-network -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=employees $ECR_REGISTRY/$ECR_REPO:$MYSQL_TAG
          sleep 15  # Ensure MySQL is ready
          docker run -d -p 8080:8080 --name web-service --network app-network \
            -e DBHOST=mysql-db -e DBUSER=root -e DBPWD=password -e DATABASE=employees -e DBPORT=3306 \
            $ECR_REGISTRY/$ECR_REPO:$WEB_SERVICE_TAG
          sleep 10  # Give Web Service time to start

      - name: Validate Deployment
        run: |
          if ! curl -sSf http://localhost:8080; then
            echo "Web Service failed to start!"
            exit 1
          fi

      - name: Cleanup and Push Web Service Image
        run: |
          docker stop web-service mysql-db
          docker rm web-service mysql-db
          docker network rm app-network
          docker push $ECR_REGISTRY/$ECR_REPO:$WEB_SERVICE_TAG
